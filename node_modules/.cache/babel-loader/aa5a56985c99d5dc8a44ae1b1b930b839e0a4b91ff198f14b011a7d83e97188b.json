{"ast":null,"code":"import { gql } from '@apollo/client';\n\n// User mutations\nexport const CREATE_USER = gql`\n  mutation CreateUser($username: String!, $email: String!, $role: String!) {\n    createUser(username: $username, email: $email, role: $role) {\n      id\n      username\n      email\n      role\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const UPDATE_USER = gql`\n  mutation UpdateUser($id: ID!, $input: UpdateUserInput!) {\n    updateUser(id: $id, input: $input) {\n      id\n      username\n      email\n      role\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const DELETE_USER = gql`\n  mutation DeleteUser($id: ID!) {\n    deleteUser(id: $id)\n  }\n`;\n\n// Hotel mutations\nexport const CREATE_HOTEL = gql`\n  mutation CreateHotel($name: String!, $address: String!, $description: String) {\n    createHotel(name: $name, address: $address, description: $description) {\n      id\n      name\n      address\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const UPDATE_HOTEL = gql`\n  mutation UpdateHotel($id: ID!, $input: UpdateHotelInput!) {\n    updateHotel(id: $id, input: $input) {\n      id\n      name\n      address\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const DELETE_HOTEL = gql`\n  mutation DeleteHotel($id: ID!) {\n    deleteHotel(id: $id)\n  }\n`;\n\n// Room mutations\nexport const CREATE_ROOM = gql`\n  mutation CreateRoom($hotelId: ID!, $roomTypeId: ID!, $number: String!, $description: String) {\n    createRoom(hotelId: $hotelId, roomTypeId: $roomTypeId, number: $number, description: $description) {\n      id\n      hotelId\n      roomTypeId\n      number\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\n// RoomType mutations\nexport const CREATE_ROOM_TYPE = gql`\n  mutation CreateRoomType($name: String!, $description: String, $price: Float!) {\n    createRoomType(name: $name, description: $description, price: $price) {\n      id\n      name\n      description\n      price\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\n// Booking mutations\nexport const CREATE_BOOKING = gql`\n  mutation CreateBooking($userId: ID!, $roomId: ID!, $checkInDate: String!, $checkOutDate: String!, $status: String!) {\n    createBooking(userId: $userId, roomId: $roomId, checkInDate: $checkInDate, checkOutDate: $checkOutDate, status: $status) {\n      id\n      userId\n      roomId\n      checkInDate\n      checkOutDate\n      status\n      createdAt\n      updatedAt\n    }\n  }\n`;\nconst Mutation = (User, Hotel, Room, RoomType, Booking) => ({\n  createUser: async (_, {\n    username,\n    email,\n    role\n  }) => {\n    return await User.create({\n      username,\n      email,\n      role\n    });\n  },\n  deleteUser: async (_, {\n    id\n  }) => {\n    try {\n      await User.destroy({\n        where: {\n          id\n        }\n      });\n      return true;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      return false;\n    }\n  },\n  createHotel: async (_, {\n    name,\n    address,\n    description\n  }) => {\n    return await Hotel.create({\n      name,\n      address,\n      description\n    });\n  },\n  deleteHotel: async (_, {\n    id\n  }) => {\n    try {\n      await Hotel.destroy({\n        where: {\n          id\n        }\n      });\n      return true;\n    } catch (error) {\n      console.error('Error deleting hotel:', error);\n      return false;\n    }\n  },\n  createRoom: async (_, {\n    hotelId,\n    roomTypeId,\n    number,\n    description\n  }) => {\n    return await Room.create({\n      hotelId,\n      roomTypeId,\n      number,\n      description\n    });\n  },\n  createRoomType: async (_, {\n    name,\n    description,\n    price\n  }) => {\n    return await RoomType.create({\n      name,\n      description,\n      price\n    });\n  },\n  createBooking: async (_, {\n    userId,\n    roomId,\n    checkInDate,\n    checkOutDate,\n    status\n  }) => {\n    return await Booking.create({\n      userId,\n      roomId,\n      checkInDate,\n      checkOutDate,\n      status\n    });\n  }\n});\n_c = Mutation;\nmodule.exports = Mutation;\nvar _c;\n$RefreshReg$(_c, \"Mutation\");","map":{"version":3,"names":["gql","CREATE_USER","UPDATE_USER","DELETE_USER","CREATE_HOTEL","UPDATE_HOTEL","DELETE_HOTEL","CREATE_ROOM","CREATE_ROOM_TYPE","CREATE_BOOKING","Mutation","User","Hotel","Room","RoomType","Booking","createUser","_","username","email","role","create","deleteUser","id","destroy","where","error","console","createHotel","name","address","description","deleteHotel","createRoom","hotelId","roomTypeId","number","createRoomType","price","createBooking","userId","roomId","checkInDate","checkOutDate","status","_c","module","exports","$RefreshReg$"],"sources":["E:/Sankey_Project/src/graphql/mutations.js"],"sourcesContent":["import { gql } from '@apollo/client';\r\n\r\n// User mutations\r\nexport const CREATE_USER = gql`\r\n  mutation CreateUser($username: String!, $email: String!, $role: String!) {\r\n    createUser(username: $username, email: $email, role: $role) {\r\n      id\r\n      username\r\n      email\r\n      role\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_USER = gql`\r\n  mutation UpdateUser($id: ID!, $input: UpdateUserInput!) {\r\n    updateUser(id: $id, input: $input) {\r\n      id\r\n      username\r\n      email\r\n      role\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_USER = gql`\r\n  mutation DeleteUser($id: ID!) {\r\n    deleteUser(id: $id)\r\n  }\r\n`;\r\n\r\n// Hotel mutations\r\nexport const CREATE_HOTEL = gql`\r\n  mutation CreateHotel($name: String!, $address: String!, $description: String) {\r\n    createHotel(name: $name, address: $address, description: $description) {\r\n      id\r\n      name\r\n      address\r\n      description\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_HOTEL = gql`\r\n  mutation UpdateHotel($id: ID!, $input: UpdateHotelInput!) {\r\n    updateHotel(id: $id, input: $input) {\r\n      id\r\n      name\r\n      address\r\n      description\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_HOTEL = gql`\r\n  mutation DeleteHotel($id: ID!) {\r\n    deleteHotel(id: $id)\r\n  }\r\n`;\r\n\r\n// Room mutations\r\nexport const CREATE_ROOM = gql`\r\n  mutation CreateRoom($hotelId: ID!, $roomTypeId: ID!, $number: String!, $description: String) {\r\n    createRoom(hotelId: $hotelId, roomTypeId: $roomTypeId, number: $number, description: $description) {\r\n      id\r\n      hotelId\r\n      roomTypeId\r\n      number\r\n      description\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\n// RoomType mutations\r\nexport const CREATE_ROOM_TYPE = gql`\r\n  mutation CreateRoomType($name: String!, $description: String, $price: Float!) {\r\n    createRoomType(name: $name, description: $description, price: $price) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\n// Booking mutations\r\nexport const CREATE_BOOKING = gql`\r\n  mutation CreateBooking($userId: ID!, $roomId: ID!, $checkInDate: String!, $checkOutDate: String!, $status: String!) {\r\n    createBooking(userId: $userId, roomId: $roomId, checkInDate: $checkInDate, checkOutDate: $checkOutDate, status: $status) {\r\n      id\r\n      userId\r\n      roomId\r\n      checkInDate\r\n      checkOutDate\r\n      status\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n  const Mutation = (User, Hotel, Room, RoomType, Booking) => ({\r\n    createUser: async (_, { username, email, role }) => {\r\n      return await User.create({ username, email, role });\r\n    },\r\n    deleteUser: async (_, { id }) => {\r\n      try {\r\n        await User.destroy({ where: { id } });\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error deleting user:', error);\r\n        return false;\r\n      }\r\n    },\r\n    createHotel: async (_, { name, address, description }) => {\r\n        return await Hotel.create({ name, address, description });\r\n      },\r\n      deleteHotel: async (_, { id }) => {\r\n          try {\r\n            await Hotel.destroy({ where: { id } });\r\n            return true; \r\n          } catch (error) {\r\n            console.error('Error deleting hotel:', error);\r\n            return false; \r\n          }\r\n        },\r\n      createRoom: async (_, { hotelId, roomTypeId, number, description }) => {\r\n        return await Room.create({ hotelId, roomTypeId, number, description });\r\n      },\r\n      createRoomType: async (_, { name, description, price }) => {\r\n        return await RoomType.create({ name, description, price });\r\n      },\r\n      createBooking: async (_, { userId, roomId, checkInDate, checkOutDate, status }) => {\r\n        return await Booking.create({ userId, roomId, checkInDate, checkOutDate, status });\r\n      }\r\n   \r\n  });\r\n  \r\n  module.exports = Mutation;\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}