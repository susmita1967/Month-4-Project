{"ast":null,"code":"import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isInputObjectType, isLeafType, isListType, isNonNullType } from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type) {\n  let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\"\");\n  }\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \\\"\".concat(inspect(type), \"\\\" not to be null.\")));\n    return;\n  }\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n  if (isListType(type)) {\n    const itemType = type.ofType;\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\" to be an object.\")));\n      return;\n    }\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(field.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\")));\n        }\n        continue;\n      }\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \\\"\").concat(type.name, \"\\\".\") + didYouMean(suggestions)));\n      }\n    }\n    return coercedValue;\n  }\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\". \") + error.message, {\n          originalError: error\n        }));\n      }\n      return;\n    }\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\".\")));\n    }\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}","map":{"version":3,"names":["didYouMean","inspect","invariant","isIterableObject","isObjectLike","addPath","pathToArray","printPathArray","suggestionList","GraphQLError","isInputObjectType","isLeafType","isListType","isNonNullType","coerceInputValue","inputValue","type","onError","arguments","length","undefined","defaultOnError","coerceInputValueImpl","path","invalidValue","error","errorPrefix","concat","message","ofType","itemType","Array","from","itemValue","index","itemPath","name","coercedValue","fieldDefs","getFields","field","Object","values","fieldValue","defaultValue","typeStr","fieldName","keys","suggestions","parseResult","parseValue","originalError"],"sources":["E:/Sankey_Project/node_modules/graphql/utilities/coerceInputValue.mjs"],"sourcesContent":["import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}