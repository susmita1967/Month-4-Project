{"ast":null,"code":"/*import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport React from 'react';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'http://localhost:4000/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport const ApolloProviderWrapper = ({ children }) => (\r\n  <ApolloProvider client={client}>\r\n    {children}\r\n  </ApolloProvider>\r\n);\r\n*/import React from'react';import{ApolloClient,InMemoryCache,ApolloProvider,createHttpLink}from'@apollo/client';import{setContext}from'@apollo/client/link/context';import{jsx as _jsx}from\"react/jsx-runtime\";const httpLink=createHttpLink({uri:'http://localhost:3001/graphql'// Your GraphQL endpoint\n});const authLink=setContext((_,_ref)=>{let{headers}=_ref;return{headers:{...headers,authorization:\"Bearer \".concat(localStorage.getItem('token'))// If you need to include auth token\n}};});const client=new ApolloClient({link:authLink.concat(httpLink),cache:new InMemoryCache()});export const ApolloProviderWrapper=_ref2=>{let{children}=_ref2;return/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:children});};","map":{"version":3,"names":["React","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","jsx","_jsx","httpLink","uri","authLink","_","_ref","headers","authorization","concat","localStorage","getItem","client","link","cache","ApolloProviderWrapper","_ref2","children"],"sources":["E:/Sankey_Project/src/apolloClient.js"],"sourcesContent":["/*import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport React from 'react';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'http://localhost:4000/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport const ApolloProviderWrapper = ({ children }) => (\r\n  <ApolloProvider client={client}>\r\n    {children}\r\n  </ApolloProvider>\r\n);\r\n*/\r\nimport React from 'react';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:3001/graphql', // Your GraphQL endpoint\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: `Bearer ${localStorage.getItem('token')}`, // If you need to include auth token\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport const ApolloProviderWrapper = ({ children }) => (\r\n  <ApolloProvider client={client}>\r\n    {children}\r\n  </ApolloProvider>\r\n);\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OACEC,YAAY,CACZC,aAAa,CACbC,cAAc,CACdC,cAAc,KACT,gBAAgB,CACvB,OAASC,UAAU,KAAQ,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEzD,KAAM,CAAAC,QAAQ,CAAGJ,cAAc,CAAC,CAC9BK,GAAG,CAAE,+BAAiC;AACxC,CAAC,CAAC,CAEF,KAAM,CAAAC,QAAQ,CAAGL,UAAU,CAAC,CAACM,CAAC,CAAAC,IAAA,GAAkB,IAAhB,CAAEC,OAAQ,CAAC,CAAAD,IAAA,CACzC,MAAO,CACLC,OAAO,CAAE,CACP,GAAGA,OAAO,CACVC,aAAa,WAAAC,MAAA,CAAYC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAI;AAC5D,CACF,CAAC,CACH,CAAC,CAAC,CAEF,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAjB,YAAY,CAAC,CAC9BkB,IAAI,CAAET,QAAQ,CAACK,MAAM,CAACP,QAAQ,CAAC,CAC/BY,KAAK,CAAE,GAAI,CAAAlB,aAAa,CAAC,CAC3B,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAmB,qBAAqB,CAAGC,KAAA,MAAC,CAAEC,QAAS,CAAC,CAAAD,KAAA,oBAChDf,IAAA,CAACJ,cAAc,EAACe,MAAM,CAAEA,MAAO,CAAAK,QAAA,CAC5BA,QAAQ,CACK,CAAC,EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}