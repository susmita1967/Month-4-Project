{"ast":null,"code":"\"use strict\";\n\nconst Toposort = require(\"toposort-class\");\nconst _ = require(\"lodash\");\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n    return model;\n  }\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n    delete this.sequelize.models[modelToRemove.name];\n  }\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: \"name\"\n    });\n    return this.models.find(model => model[options.attribute] === against);\n  }\n  findModel(callback) {\n    return this.models.find(callback);\n  }\n  get all() {\n    return this.models;\n  }\n  getModelsTopoSortedByForeignKey() {\n    const models = /* @__PURE__ */new Map();\n    const sorter = new Toposort();\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n      if (_.isObject(tableName)) {\n        tableName = \"\".concat(tableName.schema, \".\").concat(tableName.tableName);\n      }\n      models.set(tableName, model);\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n          if (attribute.references) {\n            let dep = attribute.references.model;\n            if (_.isObject(dep)) {\n              dep = \"\".concat(dep.schema, \".\").concat(dep.tableName);\n            }\n            deps.push(dep);\n          }\n        }\n      }\n      deps = deps.filter(dep => tableName !== dep);\n      sorter.add(tableName, deps);\n    }\n    let sorted;\n    try {\n      sorted = sorter.sort();\n    } catch (e) {\n      if (!e.message.startsWith(\"Cyclic dependency found.\")) {\n        throw e;\n      }\n      return null;\n    }\n    return sorted.map(modelName => {\n      return models.get(modelName);\n    }).filter(Boolean);\n  }\n  forEachModel(iterator, options) {\n    const sortedModels = this.getModelsTopoSortedByForeignKey();\n    if (sortedModels == null) {\n      throw new Error(\"Cyclic dependency found.\");\n    }\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n    if (options.reverse) {\n      sortedModels.reverse();\n    }\n    for (const model of sortedModels) {\n      iterator(model);\n    }\n  }\n}\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;","map":{"version":3,"names":["Toposort","require","_","ModelManager","constructor","sequelize","models","addModel","model","push","name","removeModel","modelToRemove","filter","getModel","against","options","defaults","attribute","find","findModel","callback","all","getModelsTopoSortedByForeignKey","Map","sorter","deps","tableName","getTableName","isObject","concat","schema","set","attrName","rawAttributes","Object","prototype","hasOwnProperty","call","references","dep","add","sorted","sort","e","message","startsWith","map","modelName","get","Boolean","forEachModel","iterator","sortedModels","Error","reverse","module","exports","default"],"sources":["E:\\Sankey_Project\\node_modules\\sequelize\\src\\model-manager.js"],"sourcesContent":["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  findModel(callback) {\n    return this.models.find(callback);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Returns an array that lists every model, sorted in order\n   * of foreign key references: The first model is a model that is depended upon,\n   * the last model is a model that is not depended upon.\n   *\n   * If there is a cyclic dependency, this returns null.\n   */\n  getModelsTopoSortedByForeignKey() {\n    const models = new Map();\n    const sorter = new Toposort();\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models.set(tableName, model);\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            let dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    let sorted;\n    try {\n      sorted = sorter.sort();\n    } catch (e) {\n      if (!e.message.startsWith('Cyclic dependency found.')) {\n        throw e;\n      }\n\n      return null;\n    }\n\n    return sorted\n      .map(modelName => {\n        return models.get(modelName);\n      })\n      .filter(Boolean);\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} options\n   * @private\n   *\n   * @deprecated\n   */\n  forEachModel(iterator, options) {\n    const sortedModels = this.getModelsTopoSortedByForeignKey();\n    if (sortedModels == null) {\n      throw new Error('Cyclic dependency found.');\n    }\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    if (options.reverse) {\n      sortedModels.reverse();\n    }\n\n    for (const model of sortedModels) {\n      iterator(model);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}