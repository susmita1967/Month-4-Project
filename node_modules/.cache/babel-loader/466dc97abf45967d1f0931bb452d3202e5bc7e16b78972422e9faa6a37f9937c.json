{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, useLazyRef, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nexport function useFragment(options) {\n  return wrapHook(\"useFragment\", _useFragment, useApolloClient(options.client))(options);\n}\nfunction _useFragment(options) {\n  var cache = useApolloClient(options.client).cache;\n  var diffOptions = useDeepMemo(function () {\n    var fragment = options.fragment,\n      fragmentName = options.fragmentName,\n      from = options.from,\n      _a = options.optimistic,\n      optimistic = _a === void 0 ? true : _a,\n      rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n    return __assign(__assign({}, rest), {\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : cache.identify(from),\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic: optimistic\n    });\n  }, [options]);\n  var resultRef = useLazyRef(function () {\n    return diffToResult(cache.diff(diffOptions));\n  });\n  var stableOptions = useDeepMemo(function () {\n    return options;\n  }, [options]);\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  React.useMemo(function () {\n    resultRef.current = diffToResult(cache.diff(diffOptions));\n  }, [diffOptions, cache]);\n  // Used for both getSnapshot and getServerSnapshot\n  var getSnapshot = React.useCallback(function () {\n    return resultRef.current;\n  }, []);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var subscription = cache.watchFragment(stableOptions).subscribe({\n      next: function (result) {\n        if (equal(result, resultRef.current)) return;\n        resultRef.current = result;\n        // If we get another update before we've re-rendered, bail out of\n        // the update and try again. This ensures that the relative timing\n        // between useQuery and useFragment stays roughly the same as\n        // fixed in https://github.com/apollographql/apollo-client/pull/11083\n        clearTimeout(lastTimeout);\n        lastTimeout = setTimeout(forceUpdate);\n      }\n    });\n    return function () {\n      subscription.unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [cache, stableOptions]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"names":["React","mergeDeepArray","useApolloClient","useSyncExternalStore","useDeepMemo","useLazyRef","wrapHook","equal","useFragment","options","_useFragment","client","cache","diffOptions","fragment","fragmentName","from","_a","optimistic","rest","__rest","__assign","returnPartialData","id","identify","query","resultRef","diffToResult","diff","stableOptions","useMemo","current","getSnapshot","useCallback","forceUpdate","lastTimeout","subscription","watchFragment","subscribe","next","result","clearTimeout","setTimeout","unsubscribe","data","complete","missing","map","error"],"sources":["E:\\Month-4-Project\\node_modules\\@apollo\\src\\react\\hooks\\useFragment.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloClient, OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport { useDeepMemo, useLazyRef, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  return wrapHook(\n    \"useFragment\",\n    _useFragment,\n    useApolloClient(options.client)\n  )(options);\n}\n\nfunction _useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient(options.client);\n\n  const diffOptions = useDeepMemo<Cache.DiffOptions<TData, TVars>>(() => {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true,\n      ...rest\n    } = options;\n\n    return {\n      ...rest,\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : cache.identify(from),\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic,\n    };\n  }, [options]);\n\n  const resultRef = useLazyRef<UseFragmentResult<TData>>(() =>\n    diffToResult(cache.diff<TData>(diffOptions))\n  );\n\n  const stableOptions = useDeepMemo(() => options, [options]);\n\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  React.useMemo(() => {\n    resultRef.current = diffToResult(cache.diff<TData>(diffOptions));\n  }, [diffOptions, cache]);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => resultRef.current, []);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n        const subscription = cache.watchFragment(stableOptions).subscribe({\n          next: (result) => {\n            if (equal(result, resultRef.current)) return;\n            resultRef.current = result;\n            // If we get another update before we've re-rendered, bail out of\n            // the update and try again. This ensures that the relative timing\n            // between useQuery and useFragment stays roughly the same as\n            // fixed in https://github.com/apollographql/apollo-client/pull/11083\n            clearTimeout(lastTimeout);\n            lastTimeout = setTimeout(forceUpdate) as any;\n          },\n        });\n        return () => {\n          subscription.unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [cache, stableOptions]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}