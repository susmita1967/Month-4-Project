{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst Utils = require(\"./../utils\");\nconst Helpers = require(\"./helpers\");\nconst _ = require(\"lodash\");\nconst Association = require(\"./base\");\nconst Op = require(\"../operators\");\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"BelongsTo\";\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([this.as, this.target.primaryKeyAttribute].join(\"_\"));\n    }\n    this.identifier = this.foreignKey;\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n    if (this.options.targetKey && !this.target.rawAttributes[this.options.targetKey]) {\n      throw new Error(\"Unknown attribute \\\"\".concat(this.options.targetKey, \"\\\" passed as targetKey, define this attribute on model \\\"\").concat(this.target.name, \"\\\" first\"));\n    }\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n    const singular = _.upperFirst(this.options.name.singular);\n    this.accessors = {\n      get: \"get\".concat(singular),\n      set: \"set\".concat(singular),\n      create: \"create\".concat(singular)\n    };\n  }\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? \"SET NULL\" : \"NO ACTION\");\n      this.options.onUpdate = this.options.onUpdate || \"CASCADE\";\n    }\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n    this.source.refreshAttributes();\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n  mixin(obj) {\n    const methods = [\"get\", \"set\", \"create\"];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, {\n          raw: true\n        })] = null;\n      }\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, {\n          raw: true\n        })] = _instance;\n      }\n      return result;\n    }\n    return Target.findOne(options);\n  }\n  async set(sourceInstance, associatedInstance) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let value = associatedInstance;\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n    sourceInstance.set(this.foreignKey, value);\n    if (options.save === false) return;\n    options = __spreadValues({\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true\n    }, options);\n    return await sourceInstance.save(options);\n  }\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n    return newAssociatedObject;\n  }\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n    return !this.isAliased;\n  }\n}\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;","map":{"version":3,"names":["Utils","require","Helpers","_","Association","Op","BelongsTo","constructor","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelize","primaryKeyAttribute","join","identifier","rawAttributes","identifierField","field","targetKey","Error","concat","targetKeyField","targetKeyIsPrimary","targetIdentifier","associationAccessor","useHooks","upperFirst","accessors","get","set","create","_injectAttributes","newAttributes","__spreadValues","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","mixinMethods","instances","where","Target","instance","cloneDeep","Object","prototype","hasOwnProperty","call","scope","unscoped","schema","schemaDelimiter","Array","isArray","in","map","_instance","findByPk","limit","and","results","findAll","result","raw","findOne","sourceInstance","associatedInstance","arguments","length","undefined","value","save","fields","association","values","newAssociatedObject","verifyAssociationAlias","alias","module","exports","default"],"sources":["E:\\Sankey_Project\\node_modules\\sequelize\\src\\associations\\belongs-to.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.as,\n          this.target.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    this.identifier = this.foreignKey;\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    if (\n      this.options.targetKey\n      && !this.target.rawAttributes[this.options.targetKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the source table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.source.refreshAttributes();\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope]  Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {string}         [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?Model|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options={}] options passed to `this.save`\n   * @param {boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   *\n   *  @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options = {}) {\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n\n    sourceInstance.set(this.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = {\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true,\n      ...options\n    };\n\n    // passes the changed field to save, so only that field get updated.\n    return await sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options={}] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create}  for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}